{
    "info": {
        "_postman_id": "96f91b20-f497-43aa-a7f9-f1443bdd3a71",
        "name": "[BE] Halloween Costume Contest API Tests",
        "description": "This collection contains a series of tests to run against your API continuously while you develop. \n\nYour goal is to keep updating your API until it passses all the tests. This proves that your API meets all the specification requirements!\n\n## How to test your API \n\n### 1. Fork this collection\n\nMake a copy of this collection to your own workspace by clicking the triple dot icon (`...`) on the collection folder and selecting `Create a fork`. Fork the collection to a personal or team workspace.\n\n### 2. Update the baseUrl\n\nIn the collection variables tab, update the `baseUrl` value to the URL of your API. \n\nYou can use a deployed public URL, or `http://localhost:<PORT>` if you are serving your API locally.\n\n### 3. Run the collection \n\nTest Driven Development (TDD) time! \n\nWhile you develop your API, run the entire collection by using the [Collection Runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/). \n\nYou can access the Collection Runner from the \"Runner\" button in the lower right corner of Postman, or by clicking the triple dots on the collection folder and selecting `Run collection`, or from the \"Run\" (play button) icon on the collection's main page. \n\nClicking Run in the collection runner will start running all the requests and their tests in this folder. You will be notified of failing tests. Keep updating your API until it passes all the tests!",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "1. get API status",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "id": "c219ba15-af72-43e9-bae4-43a6c5ccbfe3",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "const body = pm.response.json()",
                            "",
                            "pm.test(\"Returns a JSON object with an `message` property that is a string\", function () {",
                            "    pm.expect(body.message).to.be.a('string')",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "id": "5488fa4d-82aa-46ab-8cf8-aac1eeabdd2a",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        ""
                    ]
                }
            },
            "response": []
        },
        {
            "name": "2. add a contestant",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "id": "fd60b76d-5e9f-45c6-92d0-3f1c5040d0c8",
                        "exec": [
                            "pm.test(\"Status code is 201\", function () {",
                            "    pm.response.to.have.status(201);",
                            "});",
                            "",
                            "const body = pm.response.json()",
                            "",
                            "pm.test(\"Returns a JSON object with an `id` property that is a string\", function () {",
                            "    pm.expect(body.id).to.be.a('string')",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "id": "0b30b0bc-1111-4437-a393-938d72f1336d",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "POST",
                "header": [],
                "body": {
                    "mode": "raw",
                    "raw": "{\n    \"name\": \"{{contestantName}}\",\n    \"costumeTitle\": \"{{contestantCostumeTitle}}\",\n    \"costumeImgUrl\": \"{{contestantCostumeImgUrl}}\",\n    \"city\": \"{{contestantCity}}\",\n    \"country\": \"{{contestantCountry}}\"\n}",
                    "options": {
                        "raw": {
                            "language": "json"
                        }
                    }
                },
                "url": {
                    "raw": "{{baseUrl}}/contestants",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "contestants"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "3. get all contestants",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "id": "4acda362-2c1b-4ff4-a303-21e026b59c62",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "const body = pm.response.json()",
                            "",
                            "pm.test(\"Returns an array of contestants of the correct shape\", function () {",
                            "    pm.expect(body).to.be.an('array')",
                            "    pm.expect(body.length).to.be.at.least(1) // from contestant added in previous request",
                            "    ",
                            "    // check contestant shape",
                            "    const contestant1 = body[0]",
                            "    pm.expect(contestant1.id).to.be.a('string')",
                            "    pm.expect(contestant1.name).to.be.a('string')",
                            "    pm.expect(contestant1.costumeTitle).to.be.a('string')",
                            "    pm.expect(contestant1.costumeImgUrl).to.be.a('string')",
                            "    pm.expect(contestant1.city).to.be.a('string')",
                            "    pm.expect(contestant1.country).to.be.a('string')",
                            "    pm.expect(contestant1.votes).to.be.a('number')",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "id": "6f0eb721-6c73-47f7-836b-3e77d0e25036",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/contestants",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "contestants"
                    ]
                }
            },
            "response": []
        },
        {
            "name": "4. get the added contestant",
            "event": [
                {
                    "listen": "test",
                    "script": {
                        "id": "4acda362-2c1b-4ff4-a303-21e026b59c62",
                        "exec": [
                            "pm.test(\"Status code is 200\", function () {",
                            "    pm.response.to.have.status(200);",
                            "});",
                            "",
                            "const body = pm.response.json()",
                            "",
                            "pm.test(\"Returns an array of contestants of the correct shape\", function () {",
                            "    pm.expect(body).to.be.an('array')",
                            "    pm.expect(body.length).to.be.at.least(1) // from contestant added in previous request",
                            "    ",
                            "    // check contestant shape",
                            "    const contestant1 = body[0]",
                            "    pm.expect(contestant1.id).to.be.a('string')",
                            "    pm.expect(contestant1.name).to.be.a('string')",
                            "    pm.expect(contestant1.costumeTitle).to.be.a('string')",
                            "    pm.expect(contestant1.costumeImgUrl).to.be.a('string')",
                            "    pm.expect(contestant1.city).to.be.a('string')",
                            "    pm.expect(contestant1.country).to.be.a('string')",
                            "    pm.expect(contestant1.votes).to.be.a('number')",
                            "});"
                        ],
                        "type": "text/javascript"
                    }
                }
            ],
            "id": "f0d33609-697f-4f45-9386-aa1335200375",
            "protocolProfileBehavior": {
                "disableBodyPruning": true
            },
            "request": {
                "method": "GET",
                "header": [],
                "url": {
                    "raw": "{{baseUrl}}/contestants/:id",
                    "host": [
                        "{{baseUrl}}"
                    ],
                    "path": [
                        "contestants",
                        ":id"
                    ],
                    "variable": [
                        {
                            "key": "id",
                            "value": "{{id}}"
                        }
                    ]
                }
            },
            "response": []
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "id": "3739e978-f2b0-4b6f-b866-b3e13bf34c3a",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "id": "378c2033-c7a4-48bf-ab06-a158c267732b",
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "variable": [
        {
            "id": "1024a99e-c70d-4006-a9f1-850869b8fe8f",
            "key": "baseUrl",
            "value": "https://your-api-url.foo"
        },
        {
            "id": "c47beaa5-b83a-4de3-bf7f-f4375f0340de",
            "key": "contestantName",
            "value": "Clark Kent"
        },
        {
            "id": "c3947427-ceae-4a7d-9e53-26f75640ab3a",
            "key": "contestantCostumeTitle",
            "value": "Superman"
        },
        {
            "id": "fe5485bd-0607-445a-9d60-006cd3cbda50",
            "key": "contestantCostumeImgUrl",
            "value": "https://images.unsplash.com/photo-1538051046377-5ad74dc62f95?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1470&q=80"
        },
        {
            "id": "bf22c169-e11b-4042-84ca-fbcbd2f4a2cd",
            "key": "contestantCity",
            "value": "New York City"
        },
        {
            "id": "ff23b7f7-bed8-4524-8c2b-231f7b859b3a",
            "key": "contestantCountry",
            "value": "USA"
        }
    ]
}